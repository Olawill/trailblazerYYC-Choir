// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  SUPERUSER
  USER
}

enum ContentType {
  Verse
  Chorus
  Bridge
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  hashedPassword String?
  emailVerified  DateTime?
  image          String?

  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Member {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  payments Payment[]

  name       String
  email      String?  @unique
  isActive   Boolean
  dateJoined DateTime
  updatedAt  DateTime @updatedAt
}

model Due {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  // memberId  String   @db.ObjectId
  amount Int
}

model Expense {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  // memberId  String   @db.ObjectId
  amount      Float
  description String?
  expenseDate DateTime
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Payment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  amount      Float
  paymentDate DateTime
  memberId    String   @db.ObjectId
  member      Member   @relation(fields: [memberId], references: [id])

  createdAt DateTime @default(now())

  @@unique([id, memberId])
}

model Music {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title   String
  link    String?
  videoId String?

  favorite String[] @db.ObjectId // All users ID who like the music

  playlistIDs String[]   @db.ObjectId
  playlists   Playlist[] @relation(fields: [playlistIDs], references: [id])

  libraryIDs String[] @db.ObjectId // All users ID with the music in their library

  authorIDs String[] @db.ObjectId
  authors   Author[] @relation(fields: [authorIDs], references: [id])

  // Relations to verses and choruses
  contents Content[]

  lastTimePlayed      DateTime?
  numberOfTimesPlayed Int       @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Content {
  id      String      @id @default(auto()) @map("_id") @db.ObjectId
  content String
  type    ContentType

  order   Int // Field to determine the order of verses
  musicId String @db.ObjectId
  music   Music  @relation(fields: [musicId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([musicId, order]) // Optional index for performance
}

model Author {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name     String   @unique
  musicIDs String[] @db.ObjectId
  music    Music[]  @relation(fields: [musicIDs], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Playlist {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name     String  @unique
  canAddTo Boolean @default(false)
  current  Boolean @default(false)

  musicIDs String[] @db.ObjectId
  music    Music[]  @relation(fields: [musicIDs], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
